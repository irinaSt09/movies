type Query {
    popularMovies: [MovieDb]
    allPopularMovies: [MovieDb]
    getMovie(id: Int): MovieDb
    searchMoviesByTitle(title: String): [MovieDb]
    getAllGenres: [Genres]
    discover(sortBy: Sort!, minimumRatingCount: Int, genres: [Int], year: Int, includeAdult: Boolean): [MovieDb]
}

type SpokenLanguages { iso_639_1: String name: String }

type ProductionCountries { iso_3166_1: String name: String }

type ProductionCompanies { id: Int
    logo_path: String
    name: String
    origin_country: String }

type Genres { id: Int name: String }

type MovieDb
{
    adult: Boolean
    backdrop_path: String
    belongs_to_collection: String
    budget: Float
    homepage: String
    id: Int
    imdb_id: String
    original_language: String
    original_title: String
    overview: String
    popularity: Float
    poster_path: String
    release_date: String
    revenue: Int
    runtime: Int
    status: String
    tagline: String
    title: String
    video: Boolean
    vote_average: Float
    vote_count: Int
    spoken_languages: [SpokenLanguages ]
    production_countries: [ProductionCountries ]
    production_companies: [ProductionCompanies ]
    genres: [Genres ]
}

enum Sort {
    POPULARITY_ASC,
    POPULARITY_DESC,
    RELEASE_DATE_ASC,
    RELEASE_DATE_DESC,
    RATING_ASC,
    RATING_DESC,
}