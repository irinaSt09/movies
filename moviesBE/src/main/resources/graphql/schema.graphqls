type Query {
    popularMovies: [MovieDb]
    allPopularMovies: [MovieDb]
    getMovies(ids: [Int]): [MovieDb]
    searchMoviesByTitle(title: String): [MovieDb]
    getAllGenres: [Genres]
    discover(sortBy: Sort!, minimumRatingCount: Int, genres: [Int], year: Int, includeAdult: Boolean): [MovieDb]
}

type SpokenLanguages { isoCode: String name: String }

type ProductionCountries { isoCode: String name: String }

type ProductionCompanies { id: Int
    logoPath: String
    name: String
    originCountry: String }

type Genres { id: Int name: String }

type MovieDb
{
    adult: Boolean
    backdropPath: String
    belongsToCollection: String
    budget: Float
    homepage: String
    id: Int
    imdbId: String
    originalLanguage: String
    originalTitle: String
    overview: String
    popularity: Float
    posterPath: String
    releaseDate: String
    revenue: Int
    runtime: Int
    status: String
    tagline: String
    title: String
    video: Boolean
    voteAverage: Float
    voteCount: Int
    spokenLanguages: [SpokenLanguages ]
    productionCountries: [ProductionCountries ]
    productionCompanies: [ProductionCompanies ]
    genres: [Genres ]
}

enum Sort {
    POPULARITY_ASC,
    POPULARITY_DESC,
    RELEASE_DATE_ASC,
    RELEASE_DATE_DESC,
    RATING_ASC,
    RATING_DESC,
}